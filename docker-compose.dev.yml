version: '3.8'

services:
  traefik:
    image: traefik:v2.11
    container_name: comp0022_traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik=true"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    command:
      - "--api.insecure=true" # Enables the dashboard on an insecure endpoint (for development only)
      - "--api.dashboard=true" # Enables the dashboard
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false" # Only expose services explicitly
      - "--providers.file.filename=/traefik/dynamic.yml" # Load dynamic configuration from a file
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./traefik:/traefik/"
    networks:
      - internal_network

  api:
    build: ./backend
    container_name: comp0022_fastapi
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`localhost`) && PathPrefix(`/api/v1`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.middlewares.strip-prefix.stripprefix.prefixes=/api/v1"
      - "traefik.http.routers.api.middlewares=strip-prefix"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
    command: uvicorn app.main:app --host 0.0.0.0 --proxy-headers --port 8000 --root-path /api/v1
    depends_on:
      - db-master
    ports:
      - "8000:8000"
    networks:
      - internal_network

  web-app:
    container_name: comp0022_next_app
    build:
      context: ./frontend
      dockerfile: dev.Dockerfile
    depends_on:
      - api
    env_file:
      - .env
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web-app.rule=Host(`localhost`)"
      - "traefik.http.routers.web-app.tls=true"
      - "traefik.http.services.web-app.loadbalancer.server.port=3000"
    ports:
      - "3000:3000"
    networks:
      - internal_network

  db-master:
    image: bitnami/postgresql:16
    container_name: comp0022_postgres_master
    restart: always
    ports:
      - '5432:5432'
    networks:
      - internal_network
    volumes:
      - db-data:/bitnami/postgresql
      - ./db/scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=${POSTGRES_REPLICATION_USER}
      - POSTGRESQL_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
      - POSTGRESQL_USERNAME=${POSTGRES_USER}
      - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRES_DB}

  db-slave:
    image: bitnami/postgresql:16
    container_name: comp0022_postgres_slave
    restart: always
    ports:
      - '5432'
    networks:
      - internal_network
    depends_on:
      - db-master
    environment:
      - POSTGRESQL_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRESQL_MASTER_HOST=db-master
      - POSTGRESQL_PGAUDIT_LOG=READ
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=${POSTGRES_REPLICATION_USER}
      - POSTGRESQL_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
      - POSTGRESQL_MASTER_PORT_NUMBER=5432

volumes:
  db-data:

networks:
  internal_network:
    driver: bridge