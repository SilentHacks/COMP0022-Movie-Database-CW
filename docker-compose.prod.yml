version: '3.8'

services:
  traefik:
    image: traefik:v2.11
    command:
      - "--api.dashboard=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.docker.swarmMode=true"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
      - "--providers.file.filename=/traefik/dynamic.yml"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./configs/traefik:/traefik/"
    networks:
      - internal_network
      - external_network
    deploy:
      labels:
        - "traefik.enable=true"
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          memory: 64M

  api:
    image: comp0022_fastapi
    env_file:
      - .env
    command: uvicorn app.main:app --host 0.0.0.0 --proxy-headers --port 8000 --root-path /api/v1
    depends_on:
      - pg-0
    networks:
      - internal_network
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.api.rule=Host(`localhost`) && PathPrefix(`/api/v1`)"
        - "traefik.http.routers.api.tls=true"
        - "traefik.http.middlewares.strip-prefix.stripprefix.prefixes=/api/v1"
        - "traefik.http.routers.api.middlewares=strip-prefix"
        - "traefik.http.services.api.loadbalancer.server.port=8000"
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  web-app:
    image: comp0022_next_app
    env_file:
      - .env
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    networks:
      - internal_network
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.web-app.rule=Host(`localhost`)"
        - "traefik.http.routers.web-app.tls=true"
        - "traefik.http.services.web-app.loadbalancer.server.port=3000"
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  pg-0:
    image: bitnami/postgresql-repmgr:16
    networks:
      - internal_network
    volumes:
      - db-data:/bitnami/postgresql
      - ./db/scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PARTNER_NODES=pg-1,pg-0
      - REPMGR_NODE_NAME=pg-0
      - REPMGR_NODE_NETWORK_NAME=pg-0
      - REPMGR_USERNAME=${REPMGR_USERNAME}
      - REPMGR_PASSWORD=${REPMGR_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  pg-1:
    image: bitnami/postgresql-repmgr:16
    networks:
      - internal_network
    depends_on:
      - pg-0
    environment:
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_MASTER_HOST=pg-0
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PARTNER_NODES=pg-0,pg-1
      - REPMGR_NODE_NAME=pg-1
      - REPMGR_NODE_NETWORK_NAME=pg-1
      - REPMGR_USERNAME=${REPMGR_USERNAME}
      - REPMGR_PASSWORD=${REPMGR_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  pgpool:
    image: bitnami/pgpool:4
    networks:
      - internal_network
    depends_on:
      - pg-0
      - pg-1
    environment:
      - PGPOOL_BACKEND_NODES=0:pg-0:5432:4:primary:ALWAYS_PRIMARY,1:pg-1:5432:6:replica
      - PGPOOL_POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
      - PGPOOL_ADMIN_USERNAME=${PGPOOL_ADMIN_USERNAME}
      - PGPOOL_ADMIN_PASSWORD=${PGPOOL_ADMIN_PASSWORD}
      - PGPOOL_ENABLE_LOAD_BALANCING=yes
      - PGPOOL_ENABLE_STATEMENT_LOAD_BALANCING=yes
      - PGPOOL_SR_CHECK_USER=${REPMGR_USERNAME}
      - PGPOOL_SR_CHECK_PASSWORD=${REPMGR_PASSWORD}
      - PGPOOL_ENABLE_WATCHDOG=yes
      - PGPOOL_ENABLE_QUERY_CACHE=yes
      - PGPOOL_ENABLE_LDAP=no
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          memory: 128M

  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - internal_network
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.node-exporter.tls=true"
        - "traefik.http.routers.node-exporter.rule=Host(`node-exporter.localhost`)"
        - "traefik.http.routers.node-exporter.service=node-exporter"
        - "traefik.http.services.node-exporter.loadbalancer.server.port=9100"
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  prometheus:
    image: prom/prometheus:latest
    networks:
      - internal_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    depends_on:
      - cadvisor
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.tls=true"
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
        - "traefik.http.routers.prometheus.service=prometheus"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor-arm64:v0.47.2
    #    platform: linux/aarch64
    networks:
      - internal_network
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:ro"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
      - "/dev/disk/:/dev/disk:ro"
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.cadvisor.tls=true"
        - "traefik.http.routers.cadvisor.rule=Host(`cadvisor.localhost`)"
        - "traefik.http.routers.cadvisor.service=cadvisor"
        - "traefik.http.services.cadvisor.loadbalancer.server.port=8080"
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          memory: 64M

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./configs/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./configs/grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana-data:/var/lib/grafana
    networks:
      - internal_network
    environment:
      - GF_SERVER_ROOT_URL=https://localhost/dashboard
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.tls=true"
        - "traefik.http.routers.grafana.rule=Host(`localhost`) && PathPrefix(`/dashboard`)"
        - "traefik.http.middlewares.grafana-stripprefix.stripprefix.prefixes=/dashboard"
        - "traefik.http.routers.grafana.middlewares=grafana-stripprefix"
        - "traefik.http.routers.grafana.service=grafana"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          memory: 128M

volumes:
  db-data:
  prometheus-data:
  grafana-data:

networks:
  internal_network:
    driver: overlay
  external_network:
    driver: overlay