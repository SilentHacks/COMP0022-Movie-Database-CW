version: '3.8'

services:
  traefik:
    image: traefik:v2.11
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik=true"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false" # Only expose services explicitly
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
      - "--providers.file.filename=/traefik/dynamic.yml" # Load dynamic configuration from a file
#      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
#      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
#      - "--certificatesresolvers.myresolver.acme.email=your-email@example.com"
#      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./traefik:/traefik/"
    networks:
      - internal_network
      - external_network

  api:
    image: comp0022_fastapi
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`localhost`) && PathPrefix(`/api/v1`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.middlewares.strip-prefix.stripprefix.prefixes=/api/v1"
      - "traefik.http.routers.api.middlewares=strip-prefix"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
    command: uvicorn app.main:app --host 0.0.0.0 --proxy-headers --port 8000 --root-path /api/v1
    depends_on:
      - pg-0
    networks:
      - internal_network

  web-app:
    image: comp0022_next_app
    env_file:
      - .env
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web-app.rule=Host(`localhost`)"
      - "traefik.http.routers.web-app.tls=true"
      - "traefik.http.services.web-app.loadbalancer.server.port=3000"
    networks:
      - internal_network

  pg-0:
    image: bitnami/postgresql-repmgr:16
    networks:
      - internal_network
    volumes:
      - db-data:/bitnami/postgresql
      - ./db/scripts:/docker-entrypoint-initdb.d
    environment:
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PARTNER_NODES=pg-1,pg-0
      - REPMGR_NODE_NAME=pg-0
      - REPMGR_NODE_NETWORK_NAME=pg-0
      - REPMGR_USERNAME=${REPMGR_USERNAME}
      - REPMGR_PASSWORD=${REPMGR_PASSWORD}

  pg-1:
    image: bitnami/postgresql-repmgr:16
    networks:
      - internal_network
    depends_on:
      - pg-0
    environment:
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_MASTER_HOST=pg-0
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PARTNER_NODES=pg-0,pg-1
      - REPMGR_NODE_NAME=pg-1
      - REPMGR_NODE_NETWORK_NAME=pg-1
      - REPMGR_USERNAME=${REPMGR_USERNAME}
      - REPMGR_PASSWORD=${REPMGR_PASSWORD}

  pgpool:
    image: bitnami/pgpool:4
    networks:
      - internal_network
    depends_on:
      - pg-0
      - pg-1
    environment:
      - PGPOOL_BACKEND_NODES=0:pg-0:5432:4:primary:ALWAYS_PRIMARY,1:pg-1:5432:6:replica
      - PGPOOL_POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
      - PGPOOL_ADMIN_USERNAME=${PGPOOL_ADMIN_USERNAME}
      - PGPOOL_ADMIN_PASSWORD=${PGPOOL_ADMIN_PASSWORD}
      - PGPOOL_ENABLE_LOAD_BALANCING=yes
      - PGPOOL_ENABLE_STATEMENT_LOAD_BALANCING=yes
      - PGPOOL_SR_CHECK_USER=${REPMGR_USERNAME}
      - PGPOOL_SR_CHECK_PASSWORD=${REPMGR_PASSWORD}
      - PGPOOL_ENABLE_WATCHDOG=yes
      - PGPOOL_ENABLE_QUERY_CACHE=yes
      - PGPOOL_ENABLE_LDAP=no

volumes:
  db-data:

networks:
  internal_network:
    driver: overlay
  external_network:
    driver: overlay